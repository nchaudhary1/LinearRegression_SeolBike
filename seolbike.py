# -*- coding: utf-8 -*-
"""SeolBike.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UC_UUayBWzMgVVbRbR6kmQGlJsUAmQBD

**Loading Libraries**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np

import warnings 
warnings.filterwarnings('ignore')

import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
sns.set(style = 'white', color_codes = True)

"""**Data Acquisition**"""

data = pd.read_csv('/content/SeoulBikeData.csv')
data.head()

#Showing the dimension of the dataset
data.shape

#Getting the descriptive analysis on number datatypes
data.describe()

#Checking the data for any missing values
data.isna().sum()

print('There are not any missing values')

#Checking the type of the dataset
data.dtypes

#constructing the corelation matrix
corr = data.corr()
corr

#Drawing a heatmap for better understanding of the data
plt.figure(figsize=(15,15))
sns.heatmap(corr,annot = True)

'''
Plotting the boxplot for windspeed column and find the outliers 
'''
sns.boxplot(data['Wind speed (m/s)'])

Q1 = np.percentile(data['Wind speed (m/s)'], 25, interpolation = 'midpoint')  
Q2 = np.percentile(data['Wind speed (m/s)'], 50, interpolation = 'midpoint')  
Q3 = np.percentile(data['Wind speed (m/s)'], 75, interpolation = 'midpoint')     
IQR = Q3 - Q1 
low_lim = Q1 - 1.5 * IQR 
up_lim = Q3 + 1.5 * IQR
print('low limit:', low_lim) 
print('upper limit:', up_lim)

data=data[data['Wind speed (m/s)']> up_lim]

sns.boxplot(data['Wind speed (m/s)'])

# Label Encoding
data['Functioning Day']=data['Functioning Day'].apply(lambda x : 1 if (x =='Yes') else(0))
data['Holiday']=data['Holiday'].apply(lambda x : 1 if (x =='Holiday') else(0))
data['Seasons']=data['Seasons'].replace(['Autumn'],1)
data['Seasons']=data['Seasons'].replace(['Summer'],2)
data['Seasons']=data['Seasons'].replace(['Spring'],3)
data['Seasons']=data['Seasons'].replace(['Winter'],4)
data

#Dropping the date column from the dataset
data = data.drop(['Date'],axis = 1)

from sklearn.model_selection import train_test_split
train, test = train_test_split(data, test_size = 0.25)

train_x=train.drop(['Rented Bike Count'],axis=1)
train_y=train['Rented Bike Count']

test_x=test.drop(['Rented Bike Count'],axis=1)
test_y=test['Rented Bike Count']

from sklearn.linear_model import LinearRegression
ln_reg = LinearRegression()
ln_reg.fit(train_x,train_y)

from sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score
prediction = ln_reg.predict(test_x)
print(r2_score(prediction, test_y))